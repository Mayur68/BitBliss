<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        a {
            width: 50px;
            height: 50px;
            border-radius: 30px;
        }

        img {
            max-width: 100%;
            height: auto;
            border-radius: 30px;
        }

        h1 {
            color: white;
        }

        .header {
            display: flex;
            justify-content: space-between;
            background-color: #1d1b34;
            color: #fff;
            padding: 20px;
            text-align: center;
        }

        .profile-button {
            background-color: transparent;
            border: none;
            color: #fff;
            font-size: 18px;
            margin-right: 10px;
            cursor: pointer;
        }

        .explore-bar {
            bottom: 0;
            font-size: 18px;
            background-color: #fff;
            border: 1px solid #ccc;
            min-height: 30px;
            border-radius: 5px;
        }

        .section {
            flex: 1;
            padding: 20px;
            text-align: center;
            background-color: #1d1b34;
        }


        .chat-container {
            display: flex;
            flex-direction: column;
            background-color: #1d1b34;
            border-radius: 15px;
            justify-content: space-between;
            width: 98%;
            height: 600px;
            margin: auto;
            padding: 10px;
            margin-bottom: 30px;
        }

        .chat-window {
            background-color: #b0b0b0;
            display: flex;
            flex-direction: column;
            padding: 10px;
            height: 555px;
            width: 75%;
            border-radius: 15px;
        }

        .messages {
            display: flex;
            flex-direction: column;
            height: 550px;
            overflow-y: scroll;
        }

        .messages::-webkit-scrollbar {
            display: none;
        }

        .message {
            max-width: 250px;
            height: fit-content;
            padding: 5px;
            margin-bottom: 5px;
            border-radius: 5px;
            background-color: #f0f0f0;
        }

        .message::-webkit-scrollbar {
            display: none;
        }

        .message.self {
            align-self: flex-end;
            background-color: #ac10f5;
        }

        .message.notself {
            align-self: flex-start;
            background-color: #0e0eff;
        }

        #friends-list {
            background-color: #191961;
            border-radius: 15px;
            padding: 10px;
            height: 555px;
            width: 20%;
            overflow-y: auto;
        }

        .friend-item {
            padding: 5px;
            margin-bottom: 5px;
            background-color: #f0f0f0;
            border-radius: 5px;
        }

        input[type="text"] {
            width: 70%;
            padding: 10px 20px;
            border-style: none;
            border-radius: 5px;
        }

        .repo {
            background-color: #007bff;
            border-radius: 20px;
            margin-bottom: 50px;
        }

        button {
            background-color: #07a607;
            color: #fff;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            /* margin-top: 20px; */
            font-weight: bold;
        }

        #repo-container {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            border-radius: 20px;
            background-color: #007bff;
            color: wheat;
            margin-bottom: 20px;
        }

        .repository {
            width: 20%;
            height: 200px;
            background-color: #1d1b34;
            border-radius: 20px;
            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.6);
            cursor: pointer;
        }

        .flex {
            display: flex;
            flex-direction: row;
        }

        .game-card {
            display: inline-block;
            width: 200px;
            padding: 20px;
            margin: 10px;
            color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .cta-button {
            background-color: #07a607;
            color: #fff;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
            font-weight: bold;
        }

        #room-input,
        #members {
            width: 20%;
            margin-bottom: 10px;
        }

        #chat-header {
            width: 100%;
            height: 50px;
            background-color: #007bff;
            border-radius: 20px;
            color: white;
            margin-bottom: 10px;
        }

        @media only screen and (max-width: 768px) {
            .explore-bar {
                max-width: 100px;
                max-height: 20px;
            }

            .chat-container {
                display: flex;
                flex-direction: column;
                background-color: #1d1b34;
                border-radius: 15px;
                justify-content: space-between;
                width: 96%;
                margin: auto;
                height: max-content;
                /* padding: 20px; */
                margin-bottom: 30px;
            }

            .chat-window {
                background-color: #b4b3b3;
                padding: 10px;
                height: 450px;
                width: 95%;
                border-radius: 15px;
                overflow-y: scroll;
            }

            .repository {
                width: 98%;
                height: 200px;
                margin-bottom: 20px;
                background-color: #1d1b34;
                border-radius: 20px;
                box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.6);
                cursor: pointer;
            }

            #friends-list {
                background-color: #191961;
                border-radius: 15px;
                padding: 10px;
                max-height: 450px;
                width: 95%;
                height: max-content;
                margin-bottom: 10px;
                overflow-y: auto;
            }

            #repo-container {
                display: flex;
                flex-direction: column;
                margin-top: 30px;
                border-radius: 20px;
                background-color: #007bff;
                color: wheat;
                margin-bottom: 20px;
            }

            #input {
                display: flex;
                justify-content: space-between;
            }

            input[type="text"] {
                width: 70%;
                /* max-height: 20px; */
                padding: 10px;
                border-style: none;
                border-radius: 5px;
            }
        }
    </style>
</head>

<body>
    <div class="header">
        <a href="/"><img src="/assets/logo2.jpg"></a>
        <button class="profile-button" onclick="profile()">Profile</button>
        <input type="text" class="explore-bar" id="explore" placeholder="Explore...">
        <button onclick="explore()">explore</button>
    </div>
    <div>
        <div class="section">
            <button onclick="loadFriends()">Friends</button>
            <button onclick="loadRooms()">Rooms</button>
            <input type="text" id="room-input" placeholder="Enter room name..">
            <input type="text" id="members" name="members" placeholder="Add members (comma-separated)" />
            <button onclick="createRoom()">create</button>

            <div class="chat-container flex">
                <div id="friends-list"></div>
                <div class="chat-window" id="chat-window">
                    <div id="chat-header"></div>
                    <div class="messages" id="messages"></div>
                    <div id="input">
                        <input type="text" id="message-input" placeholder="Type a message...">
                        <button onclick="sendMessage()">Send</button>
                        <button onclick="clearChat()">Clear chat</button>
                    </div>
                </div>
            </div>
            <h2>Created Rooms</h2>
            <div id="created-rooms"></div>
            <div>
                <div class="section repo">
                    <h2>Repository</h2>
                    <button onclick="createRepository()">create new Repository</button>
                    <div id="repo-container"></div>
                </div>
                <h1>Cosmic Arcade</h1>
                <div class="section repo">
                    <div class="game-card">
                        <h3>tictactoe</h3>
                        <a onclick="game('tictactoe')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>cosmicshoot</h3>
                        <a onclick="game('cosmicshoot')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>chess</h3>
                        <a onclick="game('chess')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>truck</h3>
                        <a onclick="game('truck')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>Rock-Paper-Scissors</h3>
                        <a onclick="game('Rock-Paper-Scissors')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>paint</h3>
                        <a onclick="game('paint')" class="cta-button">Play Now</a>
                    </div>
                </div>
            </div>
        </div>

    </div>
</body>

<!-- home.js -->
<script>
    const userId = "<%= username %>"

    function createRepository() {
        window.location.href = "/new-Repository";
    }

    function profile() {
        window.location = "/<%= username %>"
    }

    const explores = document.getElementById("explore")
    function explore() {
        window.location.href = "/Explore/" + explores.value
    }

</script>



<!-- chat section -->
<script src="/socket.io/socket.io.js"></script>
<script>
    let recipientID;
    let receivedMessage;


    const socket = io();
    socket.emit("connection");
    socket.emit("authenticate", { userID: userId });

    socket.on("Friends", (data) => {
        const { friends } = data;
        updateFriendsList(friends);
    });

    socket.on("UserRooms", (data) => {
        const { userRooms } = data;
        updateRoomsList(userRooms);
    });
    loadFriends()
    function loadFriends() {
        socket.emit("loadFriends", userId);
    }

    function loadRooms() {
        socket.emit("loadRooms", userId);
    }

    function updateFriendsList(friends) {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        friends.forEach((friend) => {
            const friendElement = document.createElement("div");
            friendElement.className = "friend-item";
            friendElement.innerText = friend;
            friendElement.onclick = () => friendClickHandler(friend);
            friendsListDiv.appendChild(friendElement);
        });
    }

    function updateRoomsList(rooms) {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        rooms.forEach((room) => {
            const roomElement = document.createElement("div");
            roomElement.className = "friend-item";
            roomElement.innerText = room.name;
            roomElement.onclick = () => roomClickHandler(room);
            friendsListDiv.appendChild(roomElement);
        });
    }
    function roomClickHandler(room) {
        roomName = room;
        const dataToSend = {
            roomName: room,
            userId: userId
        };

        const messages = document.getElementById("messages");
        messages.innerHTML = "";

        fetch("/loadRoomHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });


        function displayChatHistory(chatHistory) {
            chatHistory.forEach((chat) => {
                if (chat.message && chat.message.trim() !== '') {
                    const messageDiv = document.createElement('div');
                    if (chat.sender.userID === userId) {
                        messageDiv.className = "message self";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    } else if (chat.sender.userID === recipientID) {
                        messageDiv.className = "message notself";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    }
                }
            });
            scrollToBottom();
        }
    }

    function scrollToBottom() {
        const chatContainer = document.querySelector(".chat-window .messages");
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function friendClickHandler(x) {
        const friend = document.querySelector(".friend-item");
        friend.style.backgroundColor = "#07a607";
        recipientID = x;
        const dataToSend = {
            recipientID: x,
            userId: userId
        };

        const messages = document.getElementById("messages");
        messages.innerHTML = "";

        fetch("/loadHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });


        function displayChatHistory(chatHistory) {
            chatHistory.forEach((chat) => {
                if (chat.message && chat.message.trim() !== '') {
                    const messageDiv = document.createElement('div');
                    if (chat.sender.userID === userId) {
                        messageDiv.className = "message self";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    } else if (chat.sender.userID === recipientID) {
                        messageDiv.className = "message notself";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    }
                }
            });
            scrollToBottom();
        }

    }

    const messageInput = document.getElementById("message-input");

    messageInput.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            sendMessage()
        }
    });

    function sendMessage() {

        const messageInput = document.getElementById("message-input");
        const message = messageInput.value;

        if (message.trim() === "") return;
        if (!recipientID) {
            console.log("Select a recipient.");
            return;
        }

        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message self";

        const messageText = document.createElement("span");
        messageText.innerText = message;

        const sentTime = document.createElement("span");
        sentTime.className = "message-time";

        const currentTime = new Date();
        const hours = currentTime.getHours();
        const minutes = currentTime.getMinutes();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const formattedTime = `${hours % 12}:${minutes.toString().padStart(2, '0')} ${ampm}`;
        sentTime.innerText = formattedTime;

        messageElement.appendChild(messageText);
        messageElement.appendChild(sentTime);

        messagesDiv.appendChild(messageElement);
        const dataToSend = {
            recipientID: recipientID,
            userId: userId,
            message: message
        };

        fetch("/saveHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dataToSend),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    console.log();
                } else {
                    console.log("Failed to save History: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error saving History:", error);
                alert("An error occurred while saving history. Please try again later.");
            });


        socket.emit('send_message', {
            senderID: "<%= username %>",
            recipientID: recipientID,
            message: message
        });

        messageInput.value = "";
        const chatWindow = document.getElementById("chat-window");
        scrollToBottom();
    }


    socket.on("receiveMsg", (data) => {
        const { senderID, message } = data;
        receivedMessage = message
        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message notself";
        messageElement.innerText = `${message}`;
        messagesDiv.appendChild(messageElement);
        scrollToBottom();
    });


    function clearChat() {
        data = {
            userId: userId,
            recipientID: recipientID,
        }
        fetch("/clearChat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    const chat_window = document.getElementById("messages");
                    chat_window.innerHTML = "";
                } else {
                    console.log("Failed to clear chat: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error clearing chat:", error);
                alert("An error occurred while clearing chat. Please try again later.");
            });
    }

    messageInput.addEventListener("keypress", function (event) {
        socket.emit('typing', userId, recipientID);
    });

    messageInput.addEventListener("keyup", function (event) {
        socket.emit('notTyping', userId, recipientID);
    });

    socket.on('istyping', (data) => {
        const { userId } = data;
        console.log(userId)
        const chatHeader = document.getElementById('chat-header');
        chatHeader.innerText = "typing...";
    });

    socket.on('notTyping', (data) => {
        const { userId } = data;
        console.log(userId)
        const chatHeader = document.getElementById('chat-header');
        chatHeader.innerHTML = ""
    });

    function createRoom() {
        const roomName = document.getElementById("room-input").value;
        const members = document.getElementById("members").value;

        const data = {
            owner: userId,
            roomName: roomName,
            members: members.split(",").map(member => member.trim()),
        };

        fetch("/createRoom", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    alert("Room created")
                } else {
                    alert("Failed to create room: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error creating room:", error);
                alert("An error occurred while creating the room. Please try again later.");
            });
    }


</script>

<script>

    function loadRepositories() {
        fetch("/loadRepository", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const repositories = data.repositories;

                    if (repositories.length > 0) {
                        const repoContainer = document.getElementById("repo-container");
                        repoContainer.innerHTML = "";

                        repositories.forEach((repo) => {
                            const repoElement = document.createElement("div");
                            repoElement.className = "repository";
                            repoElement.onclick = () => openRepository(repo.name);
                            repoElement.innerHTML = `<h3>${repo.name}</h3><p>Created on: ${repo.createdAt}</p>`;
                            repoContainer.appendChild(repoElement);
                        });
                    }
                } else {
                    alert("Failed to load repositories: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repositories", error);
                alert("An error occurred while loading the repositories. Please try again later.");
            });
    }

    function openRepository(name) {
        window.location.href = "/" + userId + "/" + name;
    }

    loadRepositories();

</script>


<script>
    function game(game) {
        if (game == 'tictactoe') {
            window.location.href = "/TicTacToe";
        } else if (game == 'cosmicshoot') {
            window.location.href = "/cosmicshoot'";
        } else if (game == 'chess') {
            window.location.href = "/chess";
        } else if (game == 'truck') {
            window.location.href = "/truck";
        } else if (game == 'paint') {
            window.location.href = "/paint";
        } else if (game == 'Rock-Paper-Scissors') {
            window.location.href = "/Rock-Paper-Scissors";
        }
    }
</script>

</html>