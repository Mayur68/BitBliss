<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .header {
            background-color: #1d1b34;
            color: #fff;
            padding: 10px 0;
            text-align: center;
        }

        .profile-button {
            background-color: transparent;
            border: none;
            color: #fff;
            font-size: 18px;
            margin-right: 10px;
            cursor: pointer;
        }

        .explore-bar {
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 5px 10px;
            width: 200px;
        }

        .sections {
            display: flex;
            flex-direction: column;
            margin: 5px;
        }

        .section {
            flex: 1;
            padding: 20px;
            text-align: center;
            background-color: #1d1b34;
        }

        .chatting-interface {
            /* Styles for the chatting interface */
            height: 400px;
            border: 1px solid #ccc;
            padding: 10px;
            overflow-y: scroll;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            background-color: #1d1b34;
            border-radius: 15px;
            justify-content: space-between;
            width: 98%;
            margin: auto;
            padding: 10px;
            margin-bottom: 30px;
        }

        .chat-window {
            background-color: #b0b0b0;
            display: flex;
            flex-direction: column;
            padding: 10px;
            height: 450px;
            width: 70%;
            border-radius: 15px;
            overflow-y: scroll;
        }

        .chat-window::-webkit-scrollbar {
            display: none;
        }

        .messages {
            display: flex;
            flex-direction: column;
bottom: 0;
        }

        .message {
            padding: 5px;
            margin-bottom: 5px;
            border-radius: 5px;
            background-color: #f0f0f0;
        }

        .message.self {
            align-self: flex-end;
            background-color: #ac10f5;
        }

        .message.notself {
            align-self: flex-start;
            background-color: #0e0eff;
        }

        #friends-list {
            background-color: #191961;
            border-radius: 15px;
            padding: 10px;
            max-height: 450px;
            width: 20%;
            overflow-y: auto;
        }

        /* Style for each friend item */
        .friend-item {
            padding: 5px;
            margin-bottom: 5px;
            background-color: #f0f0f0;
            border-radius: 5px;
        }

        input[type="text"] {
            width: 80%;
            padding: 10px;
            border-style: none;
            border-radius: 5px;
        }

        .repo {
            background-color: #007bff;
            border-radius: 20px;
        }

        button {
            background-color: #07a607;
            color: #fff;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
            font-weight: bold;
        }

        #repo-container {
            margin-top: 30px;
            border-radius: 20px;
            cursor: pointer;
            background-color: #ffffff;
            color: wheat;
            margin-bottom: 20px;
        }

        .flex {
            display: flex;
            flex-direction: row;
        }

        @media only screen and (max-width: 768px) {
            .chat-container {
                display: flex;
                flex-direction: column;
                background-color: #1d1b34;
                border-radius: 15px;
                justify-content: space-between;
                width: 90%;
                margin: auto;
                padding: 20px;
                margin-bottom: 30px;
            }

            .chat-window {
                background-color: #b4b3b3;
                padding: 10px;
                height: 450px;
                width: 95%;
                border-radius: 15px;
                overflow-y: scroll;
            }

            #friends-list {
                background-color: #191961;
                border-radius: 15px;
                padding: 10px;
                max-height: 450px;
                width: 95%;
                margin-bottom: 10px;
                overflow-y: auto;
            }
        }
    </style>
</head>

<body>
    <div class="header">
        <button class="profile-button" onclick="profile()">Profile</button>
        <input type="text" class="explore-bar" id="explore" placeholder="Explore...">
        <button onclick="explore()">explore</button>
    </div>
    <div>
        <div class="section">
            <div class="chat-container">
                <div class="chat-container flex">
                    <div id="friends-list"></div>
                    <div class="chat-window" id="chat-window">
                        <div class="messages" id="messages"></div>
                        <div>
                            <input type="text" id="message-input" placeholder="Type a message...">
                            <button onclick="sendMessage()">Send</button>
                        </div>
                    </div>
                </div>
                <div>
                    
                </div>

            </div>
            <div class="section repo">
                <h2>Repository</h2>
                <button onclick="createRepository()">create new Repository</button>
                <div id="repo-container"></div>
            </div>
        </div>
</body>


<script>
    const userId = localStorage.getItem("username");
    function createRepository() {
        window.location.href = "/new-Repository";
    }

    function profile() {
        window.location = "/<%= username %>"
    }

    const explores = document.getElementById("explore")
    function explore() {
        window.location.href = "/" + explores.value
    }

    function addFriend() {
        // const friendId = document.getElementById("addFriend").value
        const data = {
            userId: userId,
            friendId: friendId,
        };

        fetch("/addFriend", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    alert("Friend added successfully!");
                } else {
                    alert("Failed to add friend: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error adding friend:", error);
                alert("An error occurred while adding friend. Please try again later.");
            });
    }

    function loadRepositories() {
        fetch("/loadRepository", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const repositories = data.repositories;

                    if (repositories.length > 0) {
                        const repoContainer = document.getElementById("repo-container");
                        repoContainer.innerHTML = "";

                        repositories.forEach((repo) => {
                            const repoElement = document.createElement("div");
                            repoElement.className = "section";
                            repoElement.onclick = () => openRepository(repo.name);
                            repoElement.innerHTML = `<h3>${repo.name}</h3><p>Created on: ${repo.createdAt}</p>`;
                            repoContainer.appendChild(repoElement);
                        });
                    }
                } else {
                    alert("Failed to load repositories: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repositories", error);
                alert("An error occurred while loading the repositories. Please try again later.");
            });
    }

    function openRepository(name) {
        window.location.href = "/" + name;
    }

    loadRepositories();

</script>


<script src="/socket.io/socket.io.js"></script>
<script>
    let recipientID;
    let receivedMessage;


    const socket = io();
    socket.emit("connection");
    socket.emit("authenticate", { userID: userId });
    socket.emit("loadFriends", userId);
    socket.on("Friends", (data) => {
        const { friends } = data;
        updateFriendsList(friends);
    });


    function updateFriendsList(friends) {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        friends.forEach((friend) => {
            const friendElement = document.createElement("div");
            friendElement.className = "friend-item";
            friendElement.innerText = friend;
            friendElement.onclick = () => friendClickHandler(friend);
            friendsListDiv.appendChild(friendElement);
        });
    }


    function friendClickHandler(x) {
        recipientID = x;

        const dataToSend = {
            recipientID: x,
            userId: userId
        };

        const messages = document.getElementById("messages");
        messages.innerHTML = "";

        fetch("/loadHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });


        function displayChatHistory(chatHistory) {
            chatHistory.forEach((chat) => {
                if (chat.message && chat.message.trim() !== '') {
                    const messageDiv = document.createElement('div');
                    if (chat.sender.userID === userId) {
                        messageDiv.className = "message self";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    } else if (chat.sender.userID === recipientID) {
                        messageDiv.className = "message notself";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    }
                }
            });
        }


    }

    function sendMessage() {
        const messageInput = document.getElementById("message-input");
        const message = messageInput.value;
        if (message.trim() === "") return;
        if (!recipientID) {
            console.log("Select a recipient.");
            return;
        }

        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message self";
        messageElement.innerText = message;
        messagesDiv.appendChild(messageElement);
        const dataToSend = {
            recipientID: recipientID,
            userId: userId,
            message: message
        };

        fetch("/saveHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dataToSend),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    console.log();
                } else {
                    console.log("Failed to save History: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error saving History:", error);
                alert("An error occurred while saving history. Please try again later.");
            });


        socket.emit('send_message', {
            senderID: "<%= username %>",
            recipientID: recipientID,
            message: message
        });

        messageInput.value = "";
        const chatWindow = document.getElementById("chat-window");
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }


    socket.on("receiveMsg", (data) => {
        const { senderID, message } = data;
        receivedMessage = message
        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message notself";
        messageElement.innerText = `${message}`;
        messagesDiv.appendChild(messageElement);
        const chatWindow = document.getElementById("chat-window");
        chatWindow.scrollTop = chatWindow.scrollHeight;
    });

</script>

</html>