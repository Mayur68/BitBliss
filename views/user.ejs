<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #323232;
        }
    </style>
</head>

<body>
    <button onclick="profile()">profile</button>
    <button onclick="createRepository()">Create repository</button>
</body>


<script>
    function createRepository() {
        window.location.href = "/new-Repository";
    }

    function profile() {
        window.location = "/<%= username %>"
    }

    function addFriend() {
        // const friendId = document.getElementById("addFriend").value

        const userId = "<%= username %>"
        const data = {
            userId: userId,
            friendId: friendId,
        };

        fetch("/addFriend", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    alert("Friend added successfully!");
                } else {
                    alert("Failed to add friend: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error adding friend:", error);
                alert("An error occurred while adding friend. Please try again later.");
            });
    }

</script>


<script src="/socket.io/socket.io.js"></script>
<script>
    const userId = "<%= username %>"
    const socket = io();
    socket.emit("connection");
    socket.emit("authenticate", { userID: userId });
    const message = document.getElementById("message")
    const room = document.getElementById("createRoom")
    // let roomName = room.value;
    socket.emit("loadFriends", userId);
    let recepientID;
    let receivedMessage;

    function createRoom() {
        socket.emit("createRoom", { userID: userId, roomName: roomName });
    }

    socket.on("Friends", (data) => {
        const { friends } = data;
        console.log("friends: ", friends);
        updateFriendsList(friends);
    });

    function updateFriendsList(friends) {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        friends.forEach((friend) => {
            const friendElement = document.createElement("div");
            friendElement.className = "friend-item";
            friendElement.innerText = friend;
            friendElement.onclick = () => friendClickHandler(friend), showChat(friend);
            friendsListDiv.appendChild(friendElement);
        });
    }

    function friendClickHandler(x) {
        recepientID = x;

        const dataToSend = {
            recepientID: recepientID,
            userId: userId
        };

        const messages = document.getElementById("messages");
        messages.innerHTML = "";

        fetch("/loadHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });

        function displayChatHistory(chatHistory) {
            // Display each message
            chatHistory.forEach((chat) => {
                console.log(chat);

                if (chat.message && chat.message.trim() !== '') {
                    const messageDiv = document.createElement('div');

                    if (chat.sender.userId === userId) {
                        messageDiv.className = "message self";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    } else if (chat.sender.userId === recepientID) {
                        messageDiv.className = "message notself";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    }
                }
            });
        }


    }

    function sendMessage() {
        const messageInput = document.getElementById("message-input");
        const message = messageInput.value;
        if (message.trim() === "") return;
        if (!recepientID) {
            console.log("Select a recipient.");
            return;
        }

        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message self";
        messageElement.innerText = message;
        messagesDiv.appendChild(messageElement);
        const dataToSend = {
            recepientID: recepientID,
            userId: userId,
            message: message
        };

        fetch("/saveHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dataToSend),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    console.log();
                } else {
                    console.log("Failed to save History: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error saving History:", error);
                alert("An error occurred while saving history. Please try again later.");
            });


        socket.emit('send_message', {
            senderID: "<%= username %>",
            recipientID: recepientID,
            message: message
        });

        messageInput.value = "";
        const chatWindow = document.getElementById("chat-window");
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }


    socket.on("receiveMsg", (data) => {
        const { senderID, message } = data;
        receivedMessage = message
        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message notself";
        messageElement.innerText = `${message}`;
        messagesDiv.appendChild(messageElement);
        const chatWindow = document.getElementById("chat-window");
        chatWindow.scrollTop = chatWindow.scrollHeight;
    });

</script>

</html>