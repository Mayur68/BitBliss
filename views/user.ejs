<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="./assets/favicon/favicon.ico" />
    <!-- <link rel="stylesheet" href="/frontend/global.css"> -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>Cosmic Arcade</title>
</head>

<body>

    <body class="Desktop1" style="width: 1440px; height: 2321px; position: relative; background: #181A23">
        <div class="Rectangle1"
            style="width: 1398px; height: 682px; left: 21px; top: 156px; position: absolute; background: #282828; border-radius: 10px">
        </div>
        <div class="Rectangle2"
            style="width: 523px; height: 682px; left: 22px; top: 156px; position: absolute; background: #1F1F1F; border-radius: 10px">
        </div>
        <div class="Rectangle7"
            style="width: 490px; height: 64px; left: 36px; top: 180px; position: absolute; background: #969696; border-radius: 10px">
        </div>
        <div class="Rectangle3"
            style="width: 741px; height: 51px; left: 561px; top: 766px; position: absolute; background: white; border-radius: 10px; border: 1px #0047FF solid; backdrop-filter: blur(4px)">
        </div>
        <div class="TypeMassage"
            style="left: 599px; top: 778px; position: absolute; color: #6C6C6C; font-size: 22px; font-family: Inter; font-weight: 300; word-wrap: break-word">
            type massage...</div>
        <div class="Rectangle4"
            style="width: 71px; height: 51px; left: 1316px; top: 766px; position: absolute; background: #0032E3; border-radius: 15px">
        </div>
        <div class="Ellipse1"
            style="width: 63px; height: 54px; left: 36px; top: 40px; position: absolute; border-radius: 9999px"></div>
    </body>

    <script>
        function r_p_c() {
            window.location.href = "/<%= username %>/Rock-Paper-Scissors";
        }
        function TicTacToe_online() {
            window.location.href = "/<%= username %>/TicTacToe-online";
        }
        function cosmicShoot() {
            window.location.href = "/<%= username %>/shootDown";
        }
        function chess() {
            window.location.href = "/<%= username %>/chess";
        }
        function truck() {
            window.location.href = "/<%= username %>/truck";
        }
        function paint() {
            window.location.href = "/<%= username %>/paint";
        }

        function addFriend() {
            const friendId = document.getElementById("addFriend").value
            const userId = "<%= username %>"
            const data = {
                userId: userId,
                friendId: friendId,
            };
            fetch("/addFriend", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log(data);
                    if (data.status === "success") {
                        alert("Friend added successfully!");
                    } else {
                        alert("Failed to add friend: " + data.message);
                    }
                })
                .catch((error) => {
                    console.error("Error adding friend:", error);
                    // Handle the error
                    alert("An error occurred while adding friend. Please try again later.");
                });
        }
    </script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        socket.emit("connection");
        socket.emit("authenticate", { userID: "<%= username %>" });
        const message = document.getElementById("message")
        let content = message.value
        function send() {
            socket.emit('sendMsg', { senderID: "<%= username %>", message: content });
        }
        socket.on("recieveMsg", (data) => {
            const { senderID, content } = data
            console.log(content)
        })

    </script>
    <script>
        const owner = '<%= username %>'
        function createRepository() {
            const name = title
            const description = description
            fetch("/createRepository", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log(data);
                    if (data.status === "success") {
                        alert("Repository created successfully!");
                    } else {
                        alert("Failed to create Repository" + data.message);
                    }
                })
                .catch((error) => {
                    console.error("Error creating Repository", error);
                    // Handle the error
                    alert("An error occurred while creating Repository. Please try again later.");
                });
        }

        function getRepository() {
            const name = title
            const description = description
            fetch("/createRepository", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log(data);
                    if (data.status === "success") {
                        alert("Repository created successfully!");
                    } else {
                        alert("Failed to create Repository" + data.message);
                    }
                })
                .catch((error) => {
                    console.error("Error creating Repository", error);
                    // Handle the error
                    alert("An error occurred while creating Repository. Please try again later.");
                });
        }

        function updateRepository() {
            const name = title
            const description = description
            fetch("/createRepository", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log(data);
                    if (data.status === "success") {
                        alert("Repository created successfully!");
                    } else {
                        alert("Failed to create Repository" + data.message);
                    }
                })
                .catch((error) => {
                    console.error("Error creating Repository", error);
                    // Handle the error
                    alert("An error occurred while creating Repository. Please try again later.");
                });
        }

        function deleteRepository() {
            const name = title
            const description = description
            fetch("/createRepository", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log(data);
                    if (data.status === "success") {
                        alert("Repository created successfully!");
                    } else {
                        alert("Failed to create Repository" + data.message);
                    }
                })
                .catch((error) => {
                    console.error("Error creating Repository", error);
                    // Handle the error
                    alert("An error occurred while creating Repository. Please try again later.");
                });
        }

    </script>

</html>