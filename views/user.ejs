<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/frontend/user.css">
    <title>BitBliss</title>
    <style>
        #notifications {
            width: 200px;
            height: max-content;
        }
    </style>
</head>

<body>
    <div class="header">
        <a href="/"><img src="/assets/logo2.jpg"></a>
        <button class="profile-button" onclick="profile()">Profile</button>
        <input type="text" class="explore-bar" id="explore" placeholder="Explore...">
        <button onclick="explore()">explore</button>
        <div>
            <h3>Notifications</h3>
            <div id="notifications"></div>
        </div>

    </div>
    <div>
        <div class="section">
            <button onclick="loadFriends()">Friends</button>
            <button onclick="loadRooms()">Rooms</button>
            <input type="text" id="room-input" placeholder="Enter room name..">
            <input type="text" id="members" name="members" placeholder="Add members (comma-separated)" />
            <button onclick="createRoom()">create</button>

            <div class="chat-container flex">
                <div id="friends-list">
                    <label style="margin: auto; color: white;">Add people to chat</label>
                </div>
                <div class="chat-window" id="chat-window">
                    <label style="margin: auto;">Select people to message</label>
                </div>
            </div>


            <div>
                <div class="section repo">
                    <h2>Repository</h2>
                    <button onclick="createRepository()">create new Repository</button>
                    <div id="repo-container"></div>
                </div>
                <h1>Cosmic Arcade</h1>
                <div class="section repo">
                    <div class="game-card">
                        <h3>tictactoe</h3>
                        <a onclick="game('tictactoe')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>cosmicshoot</h3>
                        <a onclick="game('cosmicshoot')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>chess</h3>
                        <a onclick="game('chess')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>truck</h3>
                        <a onclick="game('truck')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>Rock-Paper-Scissors</h3>
                        <a onclick="game('Rock-Paper-Scissors')" class="cta-button">Play Now</a>
                    </div>
                    <div class="game-card">
                        <h3>paint</h3>
                        <a onclick="game('paint')" class="cta-button">Play Now</a>
                    </div>
                </div>
            </div>
        </div>

    </div>
</body>

<!-- home.js -->
<script>

    function createRepository() {
        window.location.href = "/<%= username %>/new-Repository";
    }

    function profile() {
        window.location = "/<%= username %>"
    }

    const explores = document.getElementById("explore")
    function explore() {
        window.location.href = "/Explore/" + explores.value
    }

</script>






<!-- chat section -->
<script src="/socket.io/socket.io.js"></script>
<script>

    const userId = "<%= username %>"
    let recipientID;
    let receivedMessage;


    const socket = io();
    socket.emit("connection");
    socket.emit("authenticate", { userID: userId });

    socket.on("Friends", (data) => {
        const { friends } = data;
        updateFriendsList(friends);
    });

    socket.on("friendRequest", (data) => {
        console.log("data");
        console.log(data);
        const { userId } = data;
        console.log(userId);
        notifications(userId);
    });


    socket.on("UserRooms", (data) => {
        const { userRooms } = data;
        updateRoomsList(userRooms);
    });


    function loadNotifications() {
        socket.emit("loadNotifications", userId);
    }

    function loadFriends() {
        socket.emit("loadFriends", userId);
    }

    function loadRooms() {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        socket.emit("loadRooms", userId);
    }

    loadNotifications()
    loadFriends()


    function notifications(userId) {
        const friendsListDiv = document.getElementById("notifications");
        if (userId) {
            friendsListDiv.innerHTML = `<button class="add-friend-button" onclick="addFriend('${userId}')">Accept request from ${userId}</button>`;
        } else {
            friendsListDiv.innerHTML = ``;
        }
    }

    function addFriend(friendId) {
        const friendsListDiv = document.getElementById("notifications");
        const userId = localStorage.getItem("username");

        const data = {
            userId: userId,
            friendId: friendId,
        };
        console.log(data);

        fetch("/addFriend", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    friendsListDiv.innerHTML = ``;
                    loadFriends()
                } else {
                    alert("Failed to send Request: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error sending Request:", error);
                alert("An error occurred while sending Request. Please try again later.");
            });
    }


    function updateFriendsList(friends) {
        const friendsListDiv = document.getElementById("friends-list");
        if (friends) {
            friendsListDiv.innerHTML = "";
            friends.forEach((friend) => {
                loadData(friend);
            });
        } else {
            friendsListDiv.innerHTML = `<label style="margin: auto; color:white;">Add people to chat</label>`;
        }

    }

    async function loadData(friend) {
        try {
            const username = friend;
            const response = await fetch('/loadData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            });

            if (!response.ok) {
                throw new Error('Failed to fetch');
            }

            const data = await response.json();

            if (data.status === 'success') {
                const friendElement = createFriendElement(data.user);
                const friendsListDiv = document.getElementById('friends-list');
                friendsListDiv.appendChild(friendElement);
            } else {
                throw new Error('Failed to load profile data for ' + friend);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to load profile data for ' + friend);
        }
    }



    function createFriendElement(user) {
        const friendElement = document.createElement("div");
        friendElement.className = "friend-item";
        const profileImage = document.createElement("div");
        profileImage.className = "friend-profilePhoto";
        const profileImage1 = document.createElement("img");

        if (user.profilePhoto) {
            console.log("srfdgtfgdanhz")
            profileImage1.src = user.profilePhoto;
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        } else {
            profileImage1.src = "../assets/default-profile.jpg";
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        }
        friendElement.appendChild(profileImage);
        const friendName = document.createElement("div");
        friendName.className = "friend-name";
        friendName.style.paddingTop = "10px"
        friendName.style.marginLeft = "0"
        friendName.innerText = user.username;

        friendElement.appendChild(friendName);

        friendElement.onclick = () => friendClickHandler(user.username, user);

        return friendElement;
    }

    function updateRoomsList(rooms) {
        const friendsListDiv = document.getElementById("friends-list");
        if (!rooms) {
            friendsListDiv.innerHTML = ` <label style="margin: auto;">Add people to chat</label>`;
        } else {
            friendsListDiv.innerHTML = " ";
            rooms.forEach((room) => {
                const roomElement = document.createElement("div");
                roomElement.className = "friend-item";
                roomElement.innerText = room.name;
                roomElement.onclick = () => roomClickHandler(room);
                friendsListDiv.appendChild(roomElement);
            });
        }
    }

    function scrollToBottom() {
        const chatContainer = document.querySelector(".chat-window .messages");
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function friendClickHandler(x, user) {
        recipientID = x;
        const chatWindow = document.querySelector(".chat-window");

        chatWindow.innerHTML = `<div id="chat-header"></div>
                    <div class="messages" id="messages"></div>
                    <div id="input">
                        <input type="text" id="message-input" placeholder="Type a message...">
                        <button onclick="sendMessage()">Send</button>
                        <button onclick="clearChat()">Clear chat</button>
                        <button onclick="tictactoe()">Challenge</button>
                    </div>`;

        loadHeader(recipientID, user)

        const script = document.createElement("script");
        script.src = "../frontend/scripts/user.js";
        script.id = "user-script";
        document.body.appendChild(script);

        const dataToSend = {
            recipientID: x,
            userId: userId
        };

        fetch("/loadHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });

    }

    function loadHeader(x, user) {
        const chat_header = document.getElementById('chat-header');
        const profileImage = document.createElement("div");
        profileImage.className = "friend-profilePhoto";
        profileImage.style.marginLeft = "5px";
        const profileImage1 = document.createElement("img");
        if (user.profilePhoto) {
            console.log("srfdgtfgdanhz");
            profileImage1.src = user.profilePhoto;
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        } else {
            profileImage1.src = "../assets/default-profile.jpg";
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        }
        chat_header.appendChild(profileImage);
        const profileName = document.createElement("div");
        profileName.className = "friend-Name";
        profileName.innerText = x;
        profileName.style.color = "black";
        profileName.style.marginLeft = "10px";
        chat_header.appendChild(profileName);
    }

    function displayChatHistory(chatHistory) {

        const messages = document.getElementById("messages");
        chatHistory.forEach((chat) => {
            if (chat.message && chat.message.trim() !== '') {
                const messageDiv = document.createElement('div');
                if (chat.sender === userId) {
                    messageDiv.className = "message self";
                } else if (chat.sender === recipientID) {
                    messageDiv.className = "message notself";
                }

                messageDiv.textContent = chat.message + ' ' + chat.timestamp;
                messages.appendChild(messageDiv);
            }
        });
        scrollToBottom();
    }

    function sendMessage() {

        const messageInput = document.getElementById("message-input");
        const message = messageInput.value;

        if (message.trim() === "") return;
        if (!recipientID) {
            console.log("Select a recipient.");
            return;
        }

        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message self";

        const messageText = document.createElement("span");
        messageText.innerText = message;

        const sentTime = document.createElement("span");
        sentTime.className = "message-time";

        const currentTime = new Date();
        const hours = currentTime.getHours();
        const minutes = currentTime.getMinutes();
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const formattedTime = `${hours % 12}:${minutes.toString().padStart(2, '0')} ${ampm}`;
        sentTime.innerText = " " + formattedTime;

        messageElement.appendChild(messageText);
        messageElement.appendChild(sentTime);
        messagesDiv.appendChild(messageElement);


        const dataToSend = {
            recipientID: recipientID,
            userId: userId,
            message: message,
            time: formattedTime,
        };

        fetch("/saveHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dataToSend),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    console.log();
                } else {
                    console.log("Failed to save History: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error saving History:", error);
                alert("An error occurred while saving history. Please try again later.");
            });


        socket.emit('send_message', {
            senderID: "<%= username %>",
            recipientID: recipientID,
            message: message,
            time: formattedTime
        });

        messageInput.value = "";
        const chatWindow = document.getElementById("chat-window");
        scrollToBottom();
    }


    socket.on("receiveMsg", (data) => {
        const { senderID, message, time } = data;
        receivedMessage = message;
        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message notself";
        messageElement.innerText = `${message}  ${time}`;
        messagesDiv.appendChild(messageElement);
        scrollToBottom();
    });


    function clearChat() {
        document.getElementById("messages").innerHTML = "";
        data = {
            userId: userId,
        }
        fetch("/clearChat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    const chat_window = document.getElementById("messages");
                    chat_window.innerHTML = "";
                } else {
                    console.log("Failed to clear chat: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error clearing chat:", error);
                alert("An error occurred while clearing chat. Please try again later.");
            });
    }

    // rooom 

    function createRoom() {
        const roomName = document.getElementById("room-input").value;
        const members = document.getElementById("members").value;

        if (roomName.trim() === "") {
            alert("Room name cannot be empty.");
            return;
        }

        const data = {
            owner: userId,
            roomName: roomName,
            members: members.split(",").map(member => member.trim()),
        };

        fetch("/createRoom", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                if (data.status === "success") {
                    alert("Room created");
                } else {
                    alert("Failed to create room: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error creating room:", error);
                alert("An error occurred while creating the room. Please try again later.");
            });

        loadRooms()
    }


    function roomClickHandler(room) {
        roomName = room;

        const dataToSend = {
            roomName: room,
            userId: userId,
        };

        const messages = document.getElementById("messages");
        messages.innerHTML = "";

        fetch("/loadRoomHistory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(dataToSend)
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "success") {
                    const chatHistory = data.chatHistory;
                    displayChatHistory(chatHistory);
                }
            })
            .catch((error) => {
                console.error("Error loading History:", error);
                alert("An error occurred while loading history. Please try again later.");
            });


        function displayChatHistory(chatHistory) {
            chatHistory.forEach((chat) => {
                if (chat.message && chat.message.trim() !== '') {
                    const messageDiv = document.createElement('div');
                    if (chat.sender.userID === userId) {
                        messageDiv.className = "message self";
                        messageDiv.textContent = chat.message, chat.timestamp;
                        messages.appendChild(messageDiv);
                    } else if (chat.sender.userID === recipientID) {
                        messageDiv.className = "message notself";
                        messageDiv.textContent = chat.message;
                        messages.appendChild(messageDiv);
                    }
                }
            });
            scrollToBottom();
        }
    }

    // games challenge

    socket.on('challengereturn', () => {
        player2 = recipientID;
        console.log("adgfags")
        loadBoard();
    })
    function loadBoard() {
        let senderName;
        const messagesDiv = document.getElementById("messages");
        const messageElement = document.createElement("div");
        messageElement.className = "message notself";
        messageElement.innerHTML = `
                <div class="gameBoard">
                    <h1>Tic Tac Toe</h1>
                    <div class="row">
                        <button id="box-0" class="boardBox"></button>
                        <button id="box-1" class="boardBox"></button>
                        <button id="box-2" class="boardBox"></button>
                    </div>
                    <div class="row">
                        <button id="box-3" class="boardBox"></button>
                        <button id="box-4" class="boardBox"></button>
                        <button id="box-5" class="boardBox"></button>
                    </div>
                    <div class="row">
                        <button id="box-6" class="boardBox"></button>
                        <button id="box-7" class="boardBox"></button>
                        <button id="box-8" class="boardBox"></button>
                    </div>
                </div>
                <div id="container"></div>
                <button id="goBack" onclick="goBack()">Surrender?</button>
            `;
        messagesDiv.appendChild(messageElement);

        scrollToBottom();
        const script = document.createElement("script");
        script.src = "../games/scripts/tictactoeonline.js";
        script.id = "tictactoebot-script";
        document.body.appendChild(script);
    }
    function tictactoe() {
        socket.emit('gameChallenge', userId, recipientID);
    }
    function goBack() {

    }

</script>




<!-- repository section -->
<script>

    function loadRepositories() {
        fetch("/loadRepository", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const repositories = data.repositories;

                    if (repositories.length > 0) {
                        const repoContainer = document.getElementById("repo-container");
                        repoContainer.innerHTML = "";

                        repositories.forEach((repo) => {
                            const repoElement = document.createElement("div");
                            repoElement.className = "repository";
                            repoElement.onclick = () => openRepository(repo.name);
                            repoElement.innerHTML = `<h3>${repo.name}</h3><p>Created on: ${repo.createdAt}</p>`;
                            repoContainer.appendChild(repoElement);
                        });
                    }
                } else {
                    alert("Failed to load repositories: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repositories", error);
                alert("An error occurred while loading the repositories. Please try again later.");
            });
    }

    function openRepository(name) {
        window.location.href = "/" + userId + "/" + name;
    }

    loadRepositories();

</script>


<script>
    function game(game) {
        if (game == 'tictactoe') {
            window.location.href = "/TicTacToe";
        } else if (game == 'cosmicshoot') {
            window.location.href = "/cosmicshoot'";
        } else if (game == 'chess') {
            window.location.href = "/chess";
        } else if (game == 'truck') {
            window.location.href = "/truck";
        } else if (game == 'paint') {
            window.location.href = "/paint";
        } else if (game == 'Rock-Paper-Scissors') {
            window.location.href = "/Rock-Paper-Scissors";
        }
    }
</script>

</html>