<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= repository %>
    </title>
    <style>
        /* General styling */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: space-around;
            align-items: flex-start;
        }

        /* Styling for the file section */
        #file {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 30%;
            position: relative;
        }

        /* Buttons in the file section */
        #file button {
            margin: 5px;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #file button:hover {
            background-color: #e0e0e0;
        }

        /* Contents header */
        #file h3 {
            margin-bottom: 20px;
        }

        /* File view */
        .view-file {
            border: 1px solid #ccc;
            height: max-content;
            padding: 10px;
            margin-bottom: 20px;
        }

        /* File content section */
        #file-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 60%;
        }

        /* Styling for the info section */
        #info {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 30%;
        }

        /* Actions section */
        #info h2 {
            margin-bottom: 15px;
        }

        #info button {
            margin: 5px;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #info button:hover {
            background-color: #e0e0e0;
        }

        ul {
            margin: 0;
            padding: 0;
            list-style-type: none;
            /* Remove default bullet points */
        }

        /* Style for list items */
        li {
            padding: 8px 16px;
            /* Adjust padding as needed */
            margin-bottom: 6px;
            /* Adjust margin between list items */
            background-color: #f2f2f2;
            /* Background color */
            border-radius: 4px;
            /* Rounded corners */
        }

        /* Hover effect for list items */
        li:hover {
            background-color: #ddd;
            /* Change background color on hover */
            cursor: pointer;
            /* Show pointer cursor on hover */
        }

        textarea {
            margin-top: 20px;
            resize: none;
            padding-left: 92px;
            border: none;
            tab-size: 8;
            outline: none;
            overflow: hidden;
            height: auto;
            width:80%;
            font-size: 12px;
            line-height: 20px;
            overflow-wrap: normal;
            white-space: pre;
        }
    </style>
</head>

<body>
    <section id="file">
        <button onclick="copy()">Copy</button>
        <button onclick="edit()">Edit</button>
        <button onclick="save()">Save</button>
        <button onclick="cancel()">cancel</button>
        <h3>Contents</h3>
        <div class="view-file" id="repo-files"> </div>
    </section>
    <section id="file-content"></section>
    <section id="info">
        <h2>Repository Details</h2>
        <div id="details"></div>
        <div>
            <h2>Actions</h2>
            <button onclick="settings()">settings</button>
            <button>contributers</button>
            <button>share</button>
        </div>
    </section>
</body>


<script>
    const username = "<%= username %>";
    const repository = "<%= repository %>";
    let fileName;

    function loadRepository() {
        fetch(`/getRepository`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                userId: username,
                re: repository,
            }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const repository = data.repository;
                    const fileData = data.fileData;

                    const fileContentElement = document.getElementById("repo-files");
                    const repoDetails = document.getElementById("details");
                    fileContentElement.innerHTML = "";
                    repoDetails.innerHTML = "";

                    repoDetails.innerHTML = `<h3>${repository.name}</h3><p>Description: ${repository.description || ' '}</p>
        <p>Topics: ${repository.topics || ' '}</p> <p>Contributers: ${repository.contributers || ' '} </p>`;

                    const fileListElement = document.createElement("ul");
                    fileListElement.className = "file-list";

                    fileData.forEach(({ fileName }) => {
                        const listItem = document.createElement("li");
                        listItem.textContent = fileName;
                        listItem.addEventListener("click", () => {
                            loadFileContent(fileName, fileData);
                        });
                        fileListElement.appendChild(listItem);
                    });
                    fileContentElement.appendChild(fileListElement);
                } else {
                    alert("Failed to load repository: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repository", error);
                alert("An error occurred while loading the repository. Please try again later.");
            });
    }

    function loadFileContent(fileName, fileData) {
        const { fileContent } = fileData.find((file) => file.fileName === fileName);

        const textAreaElement = document.createElement("textarea");
        textAreaElement.value = fileContent;

        const numLines = fileContent.split(/\r\n|\r|\n/).length;
        textAreaElement.rows = numLines;

        const fileContentElement = document.getElementById("file-content");
        fileContentElement.innerHTML = "";
        fileContentElement.appendChild(textAreaElement);
    }

    loadRepository();
</script>





<script>
    // Function to copy content
    function copy() {
        document.querySelector("#view-file").select();
        document.execCommand("copy");
        alert("File content copied to clipboard.");
    }

    // Function to edit content
    function edit() {
        const fileContentElement = document.querySelector("#view-file");
        fileContentElement.removeAttribute("readonly");
        const fileContent = document.querySelector("#view-file").value;
        const editTextArea = document.createElement("textarea");
        editTextArea.value = fileContent;
        fileContentElement.innerHTML = "";
        fileContentElement.appendChild(editTextArea);
    }

    // Function to save content
    function save() {
        const editTextArea = document.querySelector("#view-file");
        const editedContent = editTextArea.value;

        const username = "<%= username %>";
        const repository = "<%= repository %>";
        const blob = new Blob([editedContent], { type: 'text/plain' });

        const formData = new FormData()
        formData.append("name", repository);
        formData.append("editedFile", blob, fileName);

        fetch("/updateRepositoryFile", {
            method: "POST",
            body: formData,
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    alert("Content saved successfully.");
                } else {
                    alert("Failed to save content: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error saving content", error);
            });

        editTextArea.setAttribute("readonly", "true");
    }

    function cancel() {
        const fileContentElement = document.getElementById("view-file");
        fileContentElement.value = ""
        fetch(`/getRepository?userId=${username}&repository=${repository}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const fileContent = data.fileContent;

                    fileContentElement.value = fileContent;
                    fileContentElement.style.height = (fileContentElement.scrollHeight) + "px";
                } else {
                    alert("Failed to load repository: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repository", error);
                alert("An error occurred while loading the repository. Please try again later.");
            });
    }


    function settings() {
        const main = document.getElementById('main')
        main.innerHTML = `<form enctype="multipart/form-data" id="repositoryForm">
        <h1>Settings</h1>
        <lable>Change repository name</label>
        <input type="text" id="reponame" name="name" placeholder="Repository Name" />
        <label>
            <input type="text" id="repodiscription" name="name" placeholder="Description (optional)" />
        </label>
        <label>
            <input type="radio" name="visibility" value="public" /> Public
        </label>
        <label>
            <input type="radio" name="visibility" value="private" /> Private
        </label>
        <input type="text" id="topics" name="topics" placeholder="Topics (comma-separated)" />
        <button type="button" onclick="cancel()">Cancel</button>
        <button type="button" onclick="delete()">Delete</button>
        <button type="button" onclick="createRepository()">Save</button>
    </form>`
    }
</script>


</html>