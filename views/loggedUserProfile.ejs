<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>
        <%= username %>
    </title>
    <style>
        /* Styling the body */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }

        /* Styling the profile container */
        .profile {
            max-width: 800px;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        /* Styling the profile header */
        .profile-header {
            text-align: center;
            padding-bottom: 20px;
        }

        .profile-photo {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background-color: #ccc;
            margin: 20px auto;
            border: 5px solid #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .profile-photo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }


        /* Styling the profile name */
        .profile-name {
            font-size: 24px;
            color: #333;
            margin: 5px 0;
        }

        /* Styling the bio and location */
        .profile-bio,
        .profile-location {
            font-size: 14px;
            color: #666;
            margin: 5px 0;
        }

        /* Styling the edit profile button */
        .edit-profile-button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .edit-profile-button:hover {
            background-color: #45a049;
        }

        /* Styling the section titles */
        .section-title {
            font-size: 20px;
            color: #333;
            margin-bottom: 10px;
            border-bottom: 2px solid #ccc;
            padding-bottom: 5px;
        }

        /* Styling the friends list */
        .friends-list {
            list-style: none;
            padding: 0;
            height: max-content;
        }

        /* Styling the friend items */
        .friend-item {
            width: 30%;
            font-size: 16px;
            color: #555;
            margin-bottom: 5px;
            display: flex;
            justify-content: space-between;
            border-bottom: 2px solid #ccc;
            padding-bottom: 10px;
        }

        /* Styling the repository cards */
        .repositories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            grid-gap: 20px;
            margin-bottom: 10px;
        }

        /* Styling the repository */
        .repository {
            background-color: #cacaca;
            padding: 15px;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Styling the repository titles */
        .repo-title {
            font-size: 18px;
            color: #333;
            margin-bottom: 8px;
        }

        /* Styling the repository descriptions */
        .repo-description {
            font-size: 14px;
            color: #666;
        }

        /* Styling the profile footer */
        .profile-footer {
            text-align: center;
            padding-top: 20px;
        }

        /* Styling the logout and delete buttons */
        .logout-button,
        .delete-account-button,
        .remove-button {
            padding: 8px 16px;
            margin: 0 5px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .remove-button {
            background-color: #f44336;
            color: white;
        }

        .logout-button {
            background-color: #f44336;
            color: white;
        }

        .delete-account-button {
            background-color: #333;
            color: white;
        }

        .logout-button:hover,
        .delete-account-button:hover {
            filter: brightness(90%);
        }

        .friend-profilePhoto {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #ccc;
            border: 2px solid #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .friend-profilePhoto img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>

<body>
    <div class="profile">
        <div class="profile-header">
            <div class="profile-photo">
                <img id="profile-image" src="" alt="Profile Photo">
            </div>
            <h1 class="profile-name" id="name">Username</h1>
            <p class="profile-bio" id="bio">Bio</p>
            <p class="profile-location" id="region">Location</p>
            <button class="edit-profile-button" onclick="editProfile()">Edit Profile</button>
        </div>

        <div class="profile-content">
            <h2 class="section-title">Repositories</h2>
            <div class="repositories" id="repo-container"></div>
            <button class="edit-profile-button" onclick="loadFriends()">Friends</button>
            <ul class="friends-list" id="friends-list"></ul>
        </div>

        <div class="profile-footer">
            <button class="logout-button" onclick="logout()">Logout</button>
            <button class="delete-account-button" onclick="deleteAccount()">Delete Account</button>
        </div>
    </div>

    <script>
        function loadData() {
            const username = "<%= username %>";
            fetch('/loadData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        document.getElementById('name').textContent = data.user.username || '';
                        document.getElementById('bio').textContent = data.user.bio || '';
                        document.getElementById('region').textContent = data.user.region || '';

                        const profileImage = document.getElementById('profile-image');
                        profileImage.src = data.user.profilePhoto || "../assets/default-profile.jpg";
                        profileImage.alt = "Profile Photo";
                    } else {
                        alert('Failed to load profile data');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
        loadData();
    </script>
</body>








<script src="/socket.io/socket.io.js"></script>
<script>

    const userId = "<%= username %>"

    const socket = io();
    socket.emit("connection");
    socket.emit("authenticate", { userID: userId });




    function loadFriends() {
        socket.emit("loadFriends", userId);
    }

    socket.on("loadFriendsResponse", (data) => {
        const { friends } = data;
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        if (friends.length === 0) {
            friendsListDiv.innerHTML = `<p>You dont have any Friends</p>`;
        } else {
            updateFriendsList(friends);
        }
    });

    async function updateFriendsList(friends) {
        const friendsListDiv = document.getElementById("friends-list");
        friendsListDiv.innerHTML = "";
        for (const friend of friends) {
            try {
                const response = await fetch('/loadData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username: friend }),
                });

                const data = await response.json();

                if (data.status === 'success' && data.user) {
                    createFriendElement(data.user);
                } else {
                    throw new Error('Failed to load profile data for ' + friend);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to load profile data for ' + friend);
            }
        }
    }



    function createFriendElement(user) {
        const friendsListDiv = document.getElementById("friends-list");
        const friendElement = document.createElement("div");
        friendElement.className = "friend-item";
        const profileImage = document.createElement("div");
        profileImage.className = "friend-profilePhoto";
        const profileImage1 = document.createElement("img");


        if (user.profilePhoto) {
            profileImage1.src = user.profilePhoto;
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        } else {
            profileImage1.src = "../assets/default-profile.jpg";
            profileImage1.alt = "Profile Photo";
            profileImage.appendChild(profileImage1);
        }
        friendElement.appendChild(profileImage);

        const friendName = document.createElement("div");
        friendName.className = "friend-name";
        friendName.style.paddingTop = "10px"
        friendName.style.marginLeft = "0"
        friendName.innerText = user.username;
        friendName.onclick = () => window.location = "/" + user.username;
        friendElement.appendChild(friendName);

        const removeButton = document.createElement("button");
        removeButton.className = "remove-button";
        removeButton.innerText = "Remove Friend";
        removeButton.onclick = () => removeFriend(user.username);
        friendElement.appendChild(removeButton);

        friendsListDiv.appendChild(friendElement);
    }

    function removeFriend(friendName) {
        console.log(`Removing friend: ${friendName}`);
        data = {
            userId: userId,
            friendId: friendName,
        }
        fetch('/removeFriend', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (response.ok) {
                    loadFriends()
                } else {
                    return response.json();
                }
            })
            .catch(error => {
                console.error(error);
            });
    }

    function logout() {
        fetch('/logout', {
            method: 'POST',
            credentials: 'same-origin'
        })
            .then(response => {

                if (response.ok) {

                    localStorage.clear();

                    window.location.href = "/";
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error(error);
                alert("An error occurred while trying to log out");
            });
    }

    function deleteAccount() {
        const confirmed = window.confirm("Are you sure you want to Delete Account?");
        const username = "<%= username %>";

        if (confirmed) {
            fetch('/deleteAccount', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            })
                .then(response => {
                    if (response.ok) {
                        localStorage.clear();
                        window.location.href = "/";
                    } else {
                        return response.json();
                    }
                })
                .catch(error => {
                    console.error(error);
                });
        }
    }

    function editProfile() {
        window.location.href = "/Edit/<%= username %>";
    }


    function loadRepositories() {
        fetch("/loadRepository", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                if (data.status === "success") {
                    const repositories = data.repositories;
                    const repoContainer = document.getElementById("repo-container");
                    repoContainer.innerHTML = "";

                    if (repositories.length > 0) {
                        repositories.forEach((repo) => {
                            const repoElement = document.createElement("div");
                            repoElement.className = "repository";
                            repoElement.onclick = () => openRepository(repo.name);
                            repoElement.innerHTML = `<h3>${repo.name}</h3><p>Description: ${repo.description}</p>
                            <p>Topics: ${repo.topics}</p>`;
                            repoContainer.appendChild(repoElement);
                        });
                    } else {
                        repoContainer.innerHTML = `<p>No Repository</p>`;
                    }
                } else {
                    alert("Failed to load repositories: " + data.message);
                }
            })
            .catch((error) => {
                console.error("Error loading repositories", error);
            });
    }

    function openRepository(name) {
        window.location.href = "/" + name;
    }

    loadRepositories();
</script>

</html>