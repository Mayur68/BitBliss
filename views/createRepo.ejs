<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Repository</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .header {
            display: flex;
            justify-content: space-between;
            text-align: center;
        }

        .profile-button {
            background-color: transparent;
            border: none;
            font-size: 18px;
            margin-right: 10px;
            cursor: pointer;
        }

        /* Link and image */
        a {
            width: 50px;
            height: 50px;
            border-radius: 30px;
        }

        img {
            max-width: 100%;
            height: auto;
            border-radius: 30px;
        }

        /* Form container */
        #repositoryForm {
            max-width: 900px;
            max-height: max-content;
            margin: 0 auto;
            padding: 10%;
            border-radius: 10px;
        }

        /* Text input */
        #reponame,
        #repodiscription,
        #topics,
        #file {
            width: 90%;
            padding: 10px;
            margin-bottom: 10px;
            border: 2px solid #07a607;
            border-radius: 5px;
        }

        /* Radio buttons and labels */
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
        }

        /* Buttons */
        button {
            padding: 10px 20px;
            margin-right: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background-color: rgb(54, 54, 255);
            font-weight: bold;
        }

        #dropArea {
            border: 2px dashed #aaa;
            height: 100px;
            width: 100%;
            padding: 20px;
            text-align: center;
            margin-bottom: 10px;
        }

        .drop-area.highlight {
            background-color: #bebebe;
            border-color: rgb(62, 62, 255);
        }
    </style>
</head>

<body>
    <div class="header">
        <a href="/"><img src="/assets/logo2.jpg"></a>
        <button class="profile-button" onclick="profile()">Profile</button>
    </div>
    <form enctype="multipart/form-data" id="repositoryForm">
        <h1>Create new Repository</h1>
        <input type="text" id="reponame" name="name" placeholder="Repository Name" />
        <label>
            <input type="text" id="repodiscription" name="name" placeholder="Description (optional)" />
        </label>
        <label>
            <input type="radio" name="visibility" value="public" /> Public
        </label>
        <label>
            <input type="radio" name="visibility" value="private" /> Private
        </label>
        <input type="text" id="topics" name="topics" placeholder="Topics (comma-separated)" />
        <div id="dropArea" class="drop-area">
            <p>Drop files here or click to upload</p>
            <input type="file" id="fileInput" name="file" multiple style="display: none;" />
            <label for="fileInput" id="fileInputLabel">Choose Files</label>
        </div>
        <button type="button" onclick="cancel()">Cancel</button>
        <button type="button" onclick="createRepository()">Create Repository</button>
    </form>
</body>

<script src="https://cdn.jsdelivr.net/npm/jszip@3/dist/jszip.min.js"></script>

<script>

    function cancel() {
        window.location.href = "/";
    }


    const dropArea = document.getElementById('dropArea');
    const fileInput = document.getElementById('fileInput');
    let filesToUpload = [];
    const userId = "<%= username %>";
    let visibility = "public";

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight(event) {
        dropArea.classList.add('highlight');
    }

    function unhighlight(event) {
        dropArea.classList.remove('highlight');
    }

    dropArea.addEventListener('drop', handleDrop, false);

    function updateVisibility(event) {
        visibility = event.target.value;
    }

    document.querySelectorAll('input[type="radio"]').forEach(function (radio) {
        radio.addEventListener('change', updateVisibility);
    });

    function handleDrop(event) {
        const dt = event.dataTransfer;
        const files = dt.files;
        filesToUpload = [...files];
        handleFiles(files);
    }

    function handleFiles(files) {
        dropArea.innerHTML = '';

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileInfo = document.createElement('div');
            fileInfo.textContent = file.name;
            dropArea.appendChild(fileInfo);
        }
    }

    function zipFiles(files) {
        const zip = new JSZip();
        const promises = [];

        files.forEach(file => {
            const promise = new Promise((resolve, reject) => {
                const reader = new FileReader();

                reader.onload = function (event) {
                    const arrayBuffer = event.target.result;
                    zip.file(file.name, arrayBuffer, { binary: true });
                    resolve();
                };

                reader.onerror = function (event) {
                    reject(event.target.error);
                };

                console.log('Reading file:', file.name);

                reader.readAsArrayBuffer(file);
            });

            promises.push(promise);
        });

        return Promise.all(promises)
            .then(() => {
                return zip.generateAsync({ type: 'blob' });
            })
            .catch(error => {
                throw new Error('Error zipping files: ' + error.message);
            });
    }

    function createRepository() {
        const name = document.getElementById("reponame").value;
        const topics = document.getElementById("topics").value;
        const description = document.getElementById("repodiscription").value;
        const formData = new FormData();

        if (!name || !topics || !visibility) {
            alert("All fields are required.");
            return;
        }


        formData.append("name", name);
        formData.append("visibility", visibility);
        formData.append("topics", topics);
        formData.append("description", description);
        formData.append("accountId", userId);

        zipFiles(filesToUpload)
            .then(zipBlob => {
                console.log('Generated ZIP size:', zipBlob.size);
                console.log('Generated ZIP:', zipBlob);

                formData.append('zipFile', zipBlob, 'files.zip');
                const zipFileSize = zipBlob.size;
                if (zipFileSize > 0) {
                    sendToServer(formData);
                } else {
                    alert('No files selected or error zipping files. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error zipping files', error);
                alert('An error occurred while zipping the files. Please try again later.');
            });
    }


    function sendToServer(formData) {
        console.log("dhszdftghdh")
        fetch('/createRepository', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    window.location.href = '/';
                } else {
                    alert('Failed to create Repository: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error creating Repository', error);
                alert('An error occurred while creating the Repository. Please try again later.');
            });
    }

</script>

</html>